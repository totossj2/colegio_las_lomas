---
// TestimoniosPadres.astro
// Definir la interfaz para los testimonios
interface Testimonio {
    nombre: string;
    ocupacion: string;
    contenido: string;
}

// Recibir los testimonios como prop
const { testimonios = [] } = Astro.props as { testimonios: Testimonio[] };
---

<section class="py-16 w-full relative overflow-hidden">
    <!-- Fondo con overlay verde -->
    <div class="absolute inset-0 bg-lime-100/90 z-0">
        <img
            src="/images/background-estudiantes.jpg"
            alt="Estudiantes en el aula"
            class="w-full h-full object-cover mix-blend-overlay opacity-60"
        />
    </div>

    <div class="max-w-7xl mx-auto px-4 relative z-10">
        <!-- Título de la sección -->
        <div class="text-center mb-16">
            <h2 class="text-5xl font-light tracking-wide">
                <span class="text-lime-500">TESTIMONIOS</span>
                <span class="text-lime-600 font-bold">DE PADRES</span>
            </h2>
            <div class="w-64 h-1 bg-lime-500 mx-auto mt-4"></div>
        </div>

        <!-- Carrusel de testimonios -->
        <div class="testimonios-carousel relative">
            <div
                class="testimonios-container flex transition-transform duration-500 ease-in-out"
            >
                {
                    testimonios.map((testimonio, index) => (
                        <div class="testimonios-slide w-full flex-shrink-0 px-4">
                            <div class="bg-white shadow-lg p-8 rounded-none mx-auto max-w-md transform transition-all duration-300 hover:shadow-xl relative">
                                <h3 class="text-lime-500 text-2xl font-medium mb-2">
                                    {testimonio.nombre}
                                </h3>
                                <p class="text-gray-600 mb-6">
                                    {testimonio.ocupacion}
                                </p>
                                <p class="text-gray-800 italic text-lg leading-relaxed">
                                    "{testimonio.contenido}"
                                </p>
                            </div>
                        </div>
                    ))
                }
            </div>

            <!-- Flechas de navegación -->
            <button
                id="prev-testimonio"
                class="absolute top-1/2 left-2 transform -translate-y-1/2 bg-white/80 hover:bg-lime-500 hover:text-white text-lime-600 rounded-full p-3 shadow-md transition-colors z-20"
                aria-label="Testimonio anterior"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-6 w-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 19l-7-7 7-7"></path>
                </svg>
            </button>
            <button
                id="next-testimonio"
                class="absolute top-1/2 right-2 transform -translate-y-1/2 bg-white/80 hover:bg-lime-500 hover:text-white text-lime-600 rounded-full p-3 shadow-md transition-colors z-20"
                aria-label="Testimonio siguiente"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-6 w-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 5l7 7-7 7"></path>
                </svg>
            </button>

            <!-- Indicadores de posición -->
            <div class="flex justify-center mt-10 gap-2">
                {
                    testimonios.map((_, index) => (
                        <button
                            class="indicator w-3 h-3 rounded-full bg-gray-300 hover:bg-lime-500 transition-colors"
                            data-index={index}
                            aria-label={`Ir al testimonio ${index + 1}`}
                        />
                    ))
                }
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const container = document.querySelector(".testimonios-container");
        const slides = document.querySelectorAll(".testimonios-slide");
        const prevBtn = document.getElementById("prev-testimonio");
        const nextBtn = document.getElementById("next-testimonio");
        const indicators = document.querySelectorAll(".indicator");

        if (!container || slides.length === 0) return;

        let currentIndex = 0;
        const totalSlides = slides.length;

        // Configurar el ancho inicial
        function setupSlider() {
            if (!container) return;
            const slideWidth = container.clientWidth;
            slides.forEach((slide) => {
                (slide as HTMLElement).style.width = `${slideWidth}px`;
            });
            (container as HTMLElement).style.width =
                `${slideWidth * totalSlides}px`;
            updateSliderPosition();
        }

        // Actualizar la posición del slider
        function updateSliderPosition() {
            if (!container) return;
            const slideWidth = container.clientWidth / totalSlides;
            (container as HTMLElement).style.transform =
                `translateX(-${currentIndex * slideWidth}px)`;

            // Actualizar indicadores
            indicators.forEach((indicator, index) => {
                if (index === currentIndex) {
                    indicator.classList.add("bg-lime-500");
                    indicator.classList.remove("bg-gray-300");
                } else {
                    indicator.classList.remove("bg-lime-500");
                    indicator.classList.add("bg-gray-300");
                }
            });
        }

        // Ir al slide anterior
        function goPrev() {
            currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
            updateSliderPosition();
        }

        // Ir al siguiente slide
        function goNext() {
            currentIndex = (currentIndex + 1) % totalSlides;
            updateSliderPosition();
        }

        // Event listeners
        prevBtn?.addEventListener("click", goPrev);
        nextBtn?.addEventListener("click", goNext);

        // Indicadores
        indicators.forEach((indicator, index) => {
            indicator.addEventListener("click", () => {
                currentIndex = index;
                updateSliderPosition();
            });
        });

        // Inicializar slider
        setupSlider();

        // Responsive
        window.addEventListener("resize", setupSlider);

        // Autoplay opcional
        const autoplayInterval = setInterval(goNext, 7000);

        // Detener autoplay al interactuar
        container.addEventListener("mouseenter", () =>
            clearInterval(autoplayInterval),
        );

        // Soporte para gestos táctiles básicos
        let touchStartX = 0;
        let touchEndX = 0;

        container.addEventListener("touchstart", (e: any) => {
            touchStartX = e.changedTouches[0].screenX;
        });

        container.addEventListener("touchend", (e: any) => {
            touchEndX = e.changedTouches[0].screenX;
            handleSwipe();
        });

        function handleSwipe() {
            const swipeThreshold = 50;
            if (touchEndX < touchStartX - swipeThreshold) {
                goNext();
            }
            if (touchEndX > touchStartX + swipeThreshold) {
                goPrev();
            }
        }
    });
</script>
